{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template to setup load balanced sample app in a VPC",
  "Parameters": {
    "VPCStackName": {
      "Description": "Stack Name to get VPC related info",
      "Type": "String",
      "Default": "sample-vpc"
    },
    "IAMRoleStackName":{
      "Description": "Stack Name to get VPC related info",
      "Type": "String",
      "Default": "s3readonly-iam"
    },
    "ImageId": {
      "Description": "AMI Id for EC2 instance",
      "Type": "String",
      "Default": "ami-7f9b881c"
    },
    "InstanceType": {
      "Description": "EC2 instance family",
      "Type": "String",
      "Default": "t2.micro"
    },
    "SSHKeyName": {
      "Description": "SSH key name for login to EC2 instance",
      "Type": "String",
      "Default": "test"
    },
    "S3Bucket":{
      "Description": "S3 Bucket to fetch packages and files related to application",
      "Type": "String",
      "Default": "redtoblack"
    },
    "DBConnectionString": {
      "NoEcho": "true",
      "Description": "Connection string for DB connectivity",
      "Type": "String"
    },
  },
  "Resources": {
    "EC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the EC2 instance with application",
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 5432,
            "ToPort": 5432,
            "CidrIp": { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-VPCCIDR" } }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-VPCCIDR" } }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-VPCCIDR" } }
          }
        ],
        "Tags": [
          {
            "Key" : "Name",
            "Value" : "EC2-SecurityGroup"
          }
        ],
        "VpcId": { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-VPCID" } }
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the ELB ",
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-VPCCIDR" } }
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key" : "Name",
            "Value" : "ELB-SecurityGroup"
          }
        ],
        "VpcId": { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-VPCID" } }
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [{"Ref": "ELBSecurityGroup"}],
        "CrossZone": true,
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 60
        },
        "ConnectionSettings": {
          "IdleTimeout" : 30
        },
        "Subnets": [
          { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-PublicSubnetID-1" } },
          { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-PublicSubnetID-2" } },
          { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-PublicSubnetID-3" } }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "443",
            "InstancePort": "80",
            "Protocol": "HTTPS",
            "SSLCertificateId": "arn:aws:iam::082815275063:server-certificate/self.signed"
          },
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "TCP:80",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "5",
          "Timeout": "3"
        },
        "LoadBalancerName": "AppELB"
      }
    },
    "AppLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": false,
        "ImageId": {"Ref" : "ImageId"},
        "InstanceType": {"Ref" : "InstanceType"},
        "KeyName": {"Ref": "SSHKeyName"},
        "IamInstanceProfile": { "Fn::ImportValue" :  {"Fn::Sub": "${IAMRoleStackName}-S3ReadonlyEC2InstanceProfile" } },
        "SecurityGroups": [ {"Ref": "EC2SecurityGroup"}],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "", [
                "#!/bin/bash -v\n",
                "aws s3 cp s3://",{"Ref": "S3Bucket"},"/sample-application.tar.gz /mnt/\n",
                "tar -xzf /mnt/sample-application.tar.gz -C /mnt/\n",
                "cp /mnt/sample-application/startup-scripts/nginx.conf /etc/nginx/nginx.conf\n",
                "cp /mnt/sample-application/startup-scripts/monit-sample-app /etc/monit/conf.d/monit-sample-app\n",
                "cp /mnt/sample-application/startup-scripts/startup.sh /mnt/sample-application/startup.sh\n",
                "chmod +x /mnt/sample-application/startup.sh\n",
                "cd /mnt/sample-application && bundle install --path .bundle\n",
                "echo export DATABASE_URL=",{"Ref":"DBConnectionString"},">/mnt/sample-application/env.sh\n",
                "chown -R ubuntu:ubuntu /mnt/sample-application\n",
                "service monit restart\n",
                "service nginx restart\n",
                "/usr/local/bin/cfn-signal -e 0 --stack ", { "Ref": "AWS::StackId"},
                " --resource AppCluster  --region ", {"Ref": "AWS::Region"},"\n"
              ]
            ]
          }
        }
      }
    },
    "AppCluster": {
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": true
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 1,
          "Timeout": "PT10M5S"
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "Cooldown": "60",
        "TerminationPolicies": [ "ClosestToNextInstanceHour", "Default" ],
        "VPCZoneIdentifier": [
          { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-PrivateSubnetID-1" } },
          { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-PrivateSubnetID-2" } },
          { "Fn::ImportValue" :  {"Fn::Sub": "${VPCStackName}-PrivateSubnetID-3" } }
        ],
        "LaunchConfigurationName": {"Ref": "AppLaunchConfig"},
        "MinSize": 1,
        "MaxSize": 3,
        "HealthCheckGracePeriod": 30,
        "HealthCheckType": "EC2",
        "LoadBalancerNames": [ {"Ref": "ELB"} ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "SampleApp",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    }
  }
}
